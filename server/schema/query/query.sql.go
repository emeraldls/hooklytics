// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO "users" (
  id,
  full_name,
  email,
  password,
  google_client_id,
  created_at,
  updated_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
`

type CreateUserParams struct {
	ID             pgtype.UUID
	FullName       string
	Email          string
	Password       string
	GoogleClientID string
	CreatedAt      pgtype.Timestamptz
	UpdatedAt      pgtype.Timestamptz
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.ID,
		arg.FullName,
		arg.Email,
		arg.Password,
		arg.GoogleClientID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const createWebsite = `-- name: CreateWebsite :exec
INSERT INTO websites (
  id,
  user_id,
  domain,
  name,
  created_at,
  updated_at
) VALUES (
  $1, $2, $3, $4, $5, $6
)
`

type CreateWebsiteParams struct {
	ID        string
	UserID    pgtype.UUID
	Domain    string
	Name      string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) CreateWebsite(ctx context.Context, arg CreateWebsiteParams) error {
	_, err := q.db.Exec(ctx, createWebsite,
		arg.ID,
		arg.UserID,
		arg.Domain,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getUserByID = `-- name: GetUserByID :one

SELECT id, email, password, google_client_id, full_name, created_at, updated_at FROM "users"
WHERE id = $1
LIMIT 1
`

// --- User Queries
func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.GoogleClientID,
		&i.FullName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserBySignIn = `-- name: GetUserBySignIn :one
SELECT id, email, password, google_client_id, full_name, created_at, updated_at FROM "users"
WHERE email = $1 AND password = $2
LIMIT 1
`

type GetUserBySignInParams struct {
	Email    string
	Password string
}

func (q *Queries) GetUserBySignIn(ctx context.Context, arg GetUserBySignInParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserBySignIn, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.GoogleClientID,
		&i.FullName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWebsiteByID = `-- name: GetWebsiteByID :one

SELECT id, domain, name, user_id, client_id, host, created_at, updated_at FROM websites
WHERE id = $1
LIMIT 1
`

// -- Websites Queries
func (q *Queries) GetWebsiteByID(ctx context.Context, id string) (Website, error) {
	row := q.db.QueryRow(ctx, getWebsiteByID, id)
	var i Website
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Name,
		&i.UserID,
		&i.ClientID,
		&i.Host,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listWebsitesByUser = `-- name: ListWebsitesByUser :many
SELECT id, domain, name, user_id, client_id, host, created_at, updated_at FROM websites
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListWebsitesByUser(ctx context.Context, userID pgtype.UUID) ([]Website, error) {
	rows, err := q.db.Query(ctx, listWebsitesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Website
	for rows.Next() {
		var i Website
		if err := rows.Scan(
			&i.ID,
			&i.Domain,
			&i.Name,
			&i.UserID,
			&i.ClientID,
			&i.Host,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
